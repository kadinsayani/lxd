//go:build linux && cgo && !agent

package cluster

// The code below was generated by lxd-generate - DO NOT EDIT!

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"net/http"
	"strings"

	"github.com/canonical/lxd/lxd/db/query"
	"github.com/canonical/lxd/shared/api"
)

var _ = api.ServerEnvironment{}

var replicaObjects = RegisterStmt(`
SELECT replicas.id, replicas.cluster_link_id, replicas.project_id, replicas.name, coalesce(replicas.description, ''), replicas.last_run_date
  FROM replicas
  ORDER BY replicas.name
`)

var replicaObjectsByName = RegisterStmt(`
SELECT replicas.id, replicas.cluster_link_id, replicas.project_id, replicas.name, coalesce(replicas.description, ''), replicas.last_run_date
  FROM replicas
  WHERE ( replicas.name = ? )
  ORDER BY replicas.name
`)

var replicaObjectsByID = RegisterStmt(`
SELECT replicas.id, replicas.cluster_link_id, replicas.project_id, replicas.name, coalesce(replicas.description, ''), replicas.last_run_date
  FROM replicas
  WHERE ( replicas.id = ? )
  ORDER BY replicas.name
`)

var replicaCreate = RegisterStmt(`
INSERT INTO replicas (cluster_link_id, project_id, name, description, last_run_date)
  VALUES (?, ?, ?, ?, ?)
`)

var replicaID = RegisterStmt(`
SELECT replicas.id FROM replicas
  WHERE replicas.name = ?
`)

var replicaRename = RegisterStmt(`
UPDATE replicas SET name = ? WHERE name = ?
`)

var replicaUpdate = RegisterStmt(`
UPDATE replicas
  SET cluster_link_id = ?, project_id = ?, name = ?, description = ?, last_run_date = ?
 WHERE id = ?
`)

var replicaDeleteByName = RegisterStmt(`
DELETE FROM replicas WHERE name = ?
`)

// replicaColumns returns a string of column names to be used with a SELECT statement for the entity.
// Use this function when building statements to retrieve database entries matching the Replica entity.
func replicaColumns() string {
	return "replicas.id, replicas.cluster_link_id, replicas.project_id, replicas.name, coalesce(replicas.description, ''), replicas.last_run_date"
}

// getReplicas can be used to run handwritten sql.Stmts to return a slice of objects.
func getReplicas(ctx context.Context, stmt *sql.Stmt, args ...any) ([]Replica, error) {
	objects := make([]Replica, 0)

	dest := func(scan func(dest ...any) error) error {
		r := Replica{}
		err := scan(&r.ID, &r.ClusterLinkID, &r.ProjectID, &r.Name, &r.Description, &r.LastRunDate)
		if err != nil {
			return err
		}

		objects = append(objects, r)

		return nil
	}

	err := query.SelectObjects(ctx, stmt, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"replicas\" table: %w", err)
	}

	return objects, nil
}

// getReplicasRaw can be used to run handwritten query strings to return a slice of objects.
func getReplicasRaw(ctx context.Context, tx *sql.Tx, sql string, args ...any) ([]Replica, error) {
	objects := make([]Replica, 0)

	dest := func(scan func(dest ...any) error) error {
		r := Replica{}
		err := scan(&r.ID, &r.ClusterLinkID, &r.ProjectID, &r.Name, &r.Description, &r.LastRunDate)
		if err != nil {
			return err
		}

		objects = append(objects, r)

		return nil
	}

	err := query.Scan(ctx, tx, sql, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"replicas\" table: %w", err)
	}

	return objects, nil
}

// GetReplicas returns all available replicas.
// generator: replica GetMany
func GetReplicas(ctx context.Context, tx *sql.Tx, filters ...ReplicaFilter) ([]Replica, error) {
	var err error

	// Result slice.
	objects := make([]Replica, 0)

	// Pick the prepared statement and arguments to use based on active criteria.
	var sqlStmt *sql.Stmt
	args := []any{}
	queryParts := [2]string{}

	if len(filters) == 0 {
		sqlStmt, err = Stmt(tx, replicaObjects)
		if err != nil {
			return nil, fmt.Errorf("Failed to get \"replicaObjects\" prepared statement: %w", err)
		}
	}

	for i, filter := range filters {
		if filter.Name != nil && filter.ID == nil {
			args = append(args, []any{filter.Name}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(tx, replicaObjectsByName)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"replicaObjectsByName\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(replicaObjectsByName)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"replicaObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.ID != nil && filter.Name == nil {
			args = append(args, []any{filter.ID}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(tx, replicaObjectsByID)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"replicaObjectsByID\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(replicaObjectsByID)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"replicaObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.ID == nil && filter.Name == nil {
			return nil, errors.New("Cannot filter on empty ReplicaFilter")
		} else {
			return nil, errors.New("No statement exists for the given Filter")
		}
	}

	// Select.
	if sqlStmt != nil {
		objects, err = getReplicas(ctx, sqlStmt, args...)
	} else {
		queryStr := strings.Join(queryParts[:], "ORDER BY")
		objects, err = getReplicasRaw(ctx, tx, queryStr, args...)
	}

	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"replicas\" table: %w", err)
	}

	return objects, nil
}

// GetReplica returns the replica with the given key.
// generator: replica GetOne
func GetReplica(ctx context.Context, tx *sql.Tx, name string) (*Replica, error) {
	filter := ReplicaFilter{}
	filter.Name = &name

	objects, err := GetReplicas(ctx, tx, filter)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"replicas\" table: %w", err)
	}

	switch len(objects) {
	case 0:
		return nil, api.StatusErrorf(http.StatusNotFound, "Replica not found")
	case 1:
		return &objects[0], nil
	default:
		return nil, errors.New("More than one \"replicas\" entry matches")
	}
}

// GetReplicaID return the ID of the replica with the given key.
// generator: replica ID
func GetReplicaID(ctx context.Context, tx *sql.Tx, name string) (int64, error) {
	stmt, err := Stmt(tx, replicaID)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"replicaID\" prepared statement: %w", err)
	}

	row := stmt.QueryRowContext(ctx, name)
	var id int64
	err = row.Scan(&id)
	if errors.Is(err, sql.ErrNoRows) {
		return -1, api.StatusErrorf(http.StatusNotFound, "Replica not found")
	}

	if err != nil {
		return -1, fmt.Errorf("Failed to get \"replicas\" ID: %w", err)
	}

	return id, nil
}

// ReplicaExists checks if a replica with the given key exists.
// generator: replica Exists
func ReplicaExists(ctx context.Context, tx *sql.Tx, name string) (bool, error) {
	_, err := GetReplicaID(ctx, tx, name)
	if err != nil {
		if api.StatusErrorCheck(err, http.StatusNotFound) {
			return false, nil
		}

		return false, err
	}

	return true, nil
}

// CreateReplica adds a new replica to the database.
// generator: replica Create
func CreateReplica(ctx context.Context, tx *sql.Tx, object Replica) (int64, error) {
	// Check if a replica with the same key exists.
	exists, err := ReplicaExists(ctx, tx, object.Name)
	if err != nil {
		return -1, fmt.Errorf("Failed to check for duplicates: %w", err)
	}

	if exists {
		return -1, api.StatusErrorf(http.StatusConflict, "This \"replicas\" entry already exists")
	}

	args := make([]any, 5)

	// Populate the statement arguments.
	args[0] = object.ClusterLinkID
	args[1] = object.ProjectID
	args[2] = object.Name
	args[3] = object.Description
	args[4] = object.LastRunDate

	// Prepared statement to use.
	stmt, err := Stmt(tx, replicaCreate)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"replicaCreate\" prepared statement: %w", err)
	}

	// Execute the statement.
	result, err := stmt.Exec(args...)
	if err != nil {
		return -1, fmt.Errorf("Failed to create \"replicas\" entry: %w", err)
	}

	id, err := result.LastInsertId()
	if err != nil {
		return -1, fmt.Errorf("Failed to fetch \"replicas\" entry ID: %w", err)
	}

	return id, nil
}

// DeleteReplica deletes the replica matching the given key parameters.
// generator: replica DeleteOne-by-Name
func DeleteReplica(ctx context.Context, tx *sql.Tx, name string) error {
	stmt, err := Stmt(tx, replicaDeleteByName)
	if err != nil {
		return fmt.Errorf("Failed to get \"replicaDeleteByName\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(name)
	if err != nil {
		return fmt.Errorf("Delete \"replicas\": %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n == 0 {
		return api.StatusErrorf(http.StatusNotFound, "Replica not found")
	} else if n > 1 {
		return fmt.Errorf("Query deleted %d Replica rows instead of 1", n)
	}

	return nil
}

// UpdateReplica updates the replica matching the given key parameters.
// generator: replica Update
func UpdateReplica(ctx context.Context, tx *sql.Tx, name string, object Replica) error {
	id, err := GetReplicaID(ctx, tx, name)
	if err != nil {
		return err
	}

	stmt, err := Stmt(tx, replicaUpdate)
	if err != nil {
		return fmt.Errorf("Failed to get \"replicaUpdate\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(object.ClusterLinkID, object.ProjectID, object.Name, object.Description, object.LastRunDate, id)
	if err != nil {
		return fmt.Errorf("Update \"replicas\" entry failed: %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n != 1 {
		return fmt.Errorf("Query updated %d rows instead of 1", n)
	}

	return nil
}

// RenameReplica renames the replica matching the given key parameters.
// generator: replica Rename
func RenameReplica(ctx context.Context, tx *sql.Tx, name string, to string) error {
	stmt, err := Stmt(tx, replicaRename)
	if err != nil {
		return fmt.Errorf("Failed to get \"replicaRename\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(to, name)
	if err != nil {
		return fmt.Errorf("Rename Replica failed: %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows failed: %w", err)
	}

	if n != 1 {
		return fmt.Errorf("Query affected %d rows instead of 1", n)
	}

	return nil
}
